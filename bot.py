"""
–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏
@DownloaderSSMusicBot
"""
import asyncio
import os
import logging
import json
from io import BytesIO
from typing import Optional
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
# from dotenv import load_dotenv
from aiohttp import web

from vk_music_downloader import VKMusicDownloader

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('bot.log', encoding='utf-8')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
BOT_TOKEN = "8353650126:AAGvR3EoPXWeyCMkDIB8gDR7NwXx1REMbwQ"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
ADMIN_ID = 7850455999

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_FILE = os.path.join(os.path.dirname(__file__), 'users_stats.json')


def load_stats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {"users": []}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {"users": []}


def save_stats(stats):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
    try:
        with open(STATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def add_user(user_id: int, username: str = None, first_name: str = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = load_stats()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    for user in stats['users']:
        if user['user_id'] == user_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            user['last_seen'] = datetime.now().isoformat()
            if username:
                user['username'] = username
            if first_name:
                user['first_name'] = first_name
            save_stats(stats)
            return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats['users'].append({
        'user_id': user_id,
        'username': username,
        'first_name': first_name,
        'joined': datetime.now().isoformat(),
        'last_seen': datetime.now().isoformat()
    })
    save_stats(stats)
    return True  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å


class MusicStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º—É–∑—ã–∫–æ–π"""
    waiting_for_query = State()
    choosing_track = State()


@dp.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user = message.from_user
    is_new = add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_new:
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} (@{user.username}) - {user.first_name}")
    
    await message.answer(
        "üéµ <b>–ü—Ä–∏–≤–µ—Ç! –Ø @DownloaderSSMusicBot</b>\n\n"
        "üí´ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å –ª—é–±—É—é –º—É–∑—ã–∫—É\n\n"
        "üé∂ <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –º—É–∑—ã–∫–∏:</b> VK Music\n"
        "‚ú® –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!\n\n"
        "üåê <i>–†–∞–±–æ—Ç–∞—é –Ω–∞ Koyeb —Ö–æ—Å—Ç–∏–Ω–≥–µ</i>",
        parse_mode="HTML"
    )


@dp.message(Command('stats'))
async def cmd_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id != ADMIN_ID:
        logger.warning(f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ /stats –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = load_stats()
    users = stats.get('users', [])
    
    if not users:
        await message.answer(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0",
            parse_mode="HTML"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    total_users = len(users)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
    recent_users = sorted(users, key=lambda x: x.get('joined', ''), reverse=True)[:10]
    
    text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
    text += f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n\n"
    text += f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {min(10, total_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    
    for idx, user in enumerate(recent_users, 1):
        username = f"@{user.get('username')}" if user.get('username') else "–ù–µ—Ç username"
        first_name = user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        user_id = user.get('user_id')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        joined = user.get('joined', '')
        if joined:
            try:
                joined_date = datetime.fromisoformat(joined).strftime("%d.%m.%Y")
            except:
                joined_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            joined_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        text += f"{idx}. <b>{first_name}</b> ({username})\n"
        text += f"   ID: <code>{user_id}</code>\n"
        text += f"   –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {joined_date}\n\n"
    
    await message.answer(text, parse_mode="HTML")


@dp.message(Command('search'))
async def cmd_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
        parse_mode="HTML"
    )
    await state.set_state(MusicStates.waiting_for_query)


@dp.message(Command('cancel'))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å")
        return
    
    await state.clear()
    await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@dp.message(Command('status'))
async def cmd_status(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –º—É–∑—ã–∫–∏"""
    status_msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
    
    try:
        downloader = MusicDownloader()
        results = await downloader.test_sources()
        
        text = "üìä <b>–°—Ç–∞—Ç—É—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –º—É–∑—ã–∫–∏:</b>\n\n"
        
        sources_info = {
            'youtube': {'name': 'YouTube', 'emoji': 'üì∫'},
            'mp3wr': {'name': 'MP3WR', 'emoji': 'üéµ'},
            'sefon': {'name': 'Sefon', 'emoji': 'üé∂'}
        }
        
        for source, available in results.items():
            info = sources_info.get(source, {'name': source, 'emoji': '‚ùì'})
            status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            text += f"{info['emoji']} <b>{info['name']}:</b> {status}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∫—Å–∏
        proxy = os.getenv('PROXY')
        if proxy:
            text += f"\nüîí <b>–ü—Ä–æ–∫—Å–∏:</b> –ù–∞—Å—Ç—Ä–æ–µ–Ω"
        else:
            text += f"\nüîí <b>–ü—Ä–æ–∫—Å–∏:</b> –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            if not results.get('youtube', False):
                text += f"\nüí° <i>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTube –≤ –†–æ—Å—Å–∏–∏ –Ω—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏</i>"
        
        await status_msg.edit_text(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")


async def show_tracks_page(message: Message, tracks: list, page: int, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç—Ä–µ–∫–∞–º–∏"""
    TRACKS_PER_PAGE = 5
    total_pages = (len(tracks) + TRACKS_PER_PAGE - 1) // TRACKS_PER_PAGE
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * TRACKS_PER_PAGE
    end_idx = min(start_idx + TRACKS_PER_PAGE, len(tracks))
    page_tracks = tracks[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    for idx, track in enumerate(page_tracks):
        global_idx = start_idx + idx
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ: –Ω–æ–º–µ—Ä + –Ω–∞–∑–≤–∞–Ω–∏–µ + –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        title = track['title']
        duration = track.get('duration', 'N/A')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
        max_title_length = 30
        if len(title) > max_title_length:
            title = title[:max_title_length] + "..."
        
        button_text = f"{global_idx + 1}. {title} ‚Ä¢ {duration}"
        
        keyboard.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"download_{global_idx}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"page_{page - 1}"
        ))
    
    nav_buttons.append(InlineKeyboardButton(
        text=f"üìÑ {page + 1}/{total_pages}",
        callback_data="page_info"
    ))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
            callback_data=f"page_{page + 1}"
        ))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel"
    )])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üéµ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n"
        f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(tracks)} —Ç—Ä–µ–∫–æ–≤\n"
        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
        f"‚è¨ –í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"
    )
    
    await message.edit_text(
        text,
        reply_markup=markup,
        parse_mode="HTML"
    )


@dp.message(MusicStates.waiting_for_query)
@dp.message(F.text & ~F.text.startswith('/'))
async def search_music(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = message.text.strip()
    
    if not query:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    search_msg = await message.answer("üîç –ò—â—É –º—É–∑—ã–∫—É –≤ VK Music...")
    
    try:
        logger.info(f"–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏: '{query}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –≤ VK Music (—É–≤–µ–ª–∏—á–∏–º –ª–∏–º–∏—Ç –¥–æ 20)
        downloader = VKMusicDownloader()
        tracks = await downloader.search(query, limit=20)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
        
        if not tracks:
            logger.warning(f"–¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
            await search_msg.edit_text(
                "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await state.update_data(tracks=tracks, page=0)
        await state.set_state(MusicStates.choosing_track)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_tracks_page(search_msg, tracks, 0, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await search_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ"
        )
        await state.clear()


@dp.callback_query(F.data == "cancel")
async def callback_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞"""
    await callback.message.edit_text("‚úÖ –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
    await state.clear()
    await callback.answer()


@dp.callback_query(F.data.startswith("page_"))
async def callback_page(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    if callback.data == "page_info":
        await callback.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=False)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    tracks = data.get('tracks', [])
    
    if not tracks:
        await callback.answer("‚ùå –¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(page=page)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_tracks_page(callback.message, tracks, page, state)
    await callback.answer()


@dp.callback_query(F.data.startswith("download_"))
async def callback_download(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞"""
    await callback.answer("‚è≥ –°–∫–∞—á–∏–≤–∞—é...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞
        track_idx = int(callback.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        tracks = data.get('tracks', [])
        
        if track_idx >= len(tracks):
            await callback.message.edit_text("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        track = tracks[track_idx]
        
        logger.info(f"–ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞: '{track['title']}' ({track['url']}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
        progress_msg = await callback.message.edit_text(
            f"‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú 0%\n"
            f"üì• <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...</b>\n\n"
            f"üéµ {track['title']}\n"
            f"‚è± {track['duration']}",
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - 25%
        await asyncio.sleep(0.3)
        await progress_msg.edit_text(
            f"üü¶üü¶‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú 25%\n"
            f"üì• <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...</b>\n\n"
            f"üéµ {track['title']}\n"
            f"‚è± {track['duration']}",
            parse_mode="HTML"
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫ –∏–∑ VK Music
        downloader = VKMusicDownloader()
        audio_data = await downloader.download_track(track['url'])
        
        if not audio_data:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫: '{track['title']}' ({track['url']})")
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫."
            )
            await state.clear()
            return
        
        file_size_mb = len(audio_data) / 1024 / 1024
        logger.info(f"–¢—Ä–µ–∫ —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ: '{track['title']}', —Ä–∞–∑–º–µ—Ä: {file_size_mb:.2f} –ú–ë")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - 75%
        await progress_msg.edit_text(
            f"üü¶üü¶üü¶üü¶üü¶üü¶üü¶‚¨ú‚¨ú‚¨ú 75%\n"
            f"üì§ <b>–û—Ç–ø—Ä–∞–≤–∫–∞...</b>\n\n"
            f"üéµ {track['title']}\n"
            f"‚è± {track['duration']}",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        audio_file = BufferedInputFile(
            file=audio_data,
            filename=f"{track['artist']} - {track['title']}.mp3"
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∫—Ä–∞—Å–∏–≤–æ
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted_title = f"‚ô´ {track['title']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        performer_with_bot = f"{track['artist']} ‚ú¶ @DownloaderSSMusicBot"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É
        thumbnail_path = os.path.join(os.path.dirname(__file__), 'thumbnail.jpg')
        if os.path.exists(thumbnail_path):
            with open(thumbnail_path, 'rb') as thumb_file:
                thumbnail = BufferedInputFile(thumb_file.read(), filename='thumbnail.jpg')
        else:
            thumbnail = None
        
        await callback.message.answer_audio(
            audio=audio_file,
            title=formatted_title,
            performer=performer_with_bot,
            thumbnail=thumbnail,
            caption=f"üéµ <b>{track['title']}</b>\n"
                   f"üë§ <i>{track['artist']}</i>\n"
                   f"‚è± {track['duration']}\n\n"
                   f"üì• Downloaded by @DownloaderSSMusicBot",
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–º
        await progress_msg.delete()
        
        logger.info(f"–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}: '{track['title']}'")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞: {e}", exc_info=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
        error_msg = str(e)
        if "Request Entity Too Large" in error_msg or "too large" in error_msg.lower():
            logger.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram: '{track['title']}'")
            await callback.message.edit_text(
                "‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!</b>\n\n"
                "üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (50 –ú–ë)\n\n"
                "üí° <b>–ü–æ–ø—Ä–æ–±—É–π:</b>\n"
                "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≤–µ—Ä—Å–∏—é —Ç—Ä–µ–∫–∞\n"
                "‚Ä¢ –ù–∞–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é –ø–µ—Å–Ω–∏",
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫\n"
                "–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫",
                parse_mode="HTML"
            )
        await state.clear()


# HTTP endpoint –¥–ª—è –ø–∏–Ω–≥–∞ (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞—Å—ã–ø–∞–ª –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ)
async def health_check(request):
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    return web.Response(text="Bot is alive! üéµ", status=200)


async def keep_alive():
    """Keep-alive —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è"""
    while True:
        try:
            await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            logger.info("Keep-alive ping")
        except Exception as e:
            logger.error(f"Keep-alive error: {e}")


async def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks"""
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    
    port = int(os.getenv('PORT', 8000))
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    return runner


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    web_runner = None
    keep_alive_task = None
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∏–Ω–≥–æ–≤
        web_runner = await start_web_server()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –≤ —Ñ–æ–Ω–µ
        keep_alive_task = asyncio.create_task(keep_alive())
        
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤
        while True:
            try:
                await dp.start_polling(bot)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")
                logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(3)
        
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        
        # –û—Ç–º–µ–Ω—è–µ–º keep-alive –∑–∞–¥–∞—á—É
        if keep_alive_task:
            keep_alive_task.cancel()
            try:
                await keep_alive_task
            except asyncio.CancelledError:
                pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º VK Music —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            vk_downloader = VKMusicDownloader()
            await vk_downloader.close()
        except:
            pass
            
        try:
            await bot.session.close()
        except:
            pass
            
        if web_runner:
            try:
                await web_runner.cleanup()
            except:
                pass


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
